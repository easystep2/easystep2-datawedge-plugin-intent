name: Publish to NPM

on:
  workflow_run:
    workflows: ["Build Plugin"]
    types:
      - completed
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use current version)'
        required: false
        default: ''
      auto_bump:
        description: 'Auto-bump version'
        type: 'choice'
        options:
          - 'none'
          - 'patch'
          - 'minor'
          - 'major'
        default: 'none'
      publish-capacitor:
        description: 'Publish Capacitor plugin'
        type: boolean
        default: true  
      publish-cordova:
        description: 'Publish Cordova plugin'
        type: boolean
        default: true
      dry-run:
        description: 'Dry run (no actual publishing)'
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write # Needed for creating tags and commits
      packages: write
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important to fetch git history for version tagging
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Set git identity for version commits
        if: ${{ github.event.inputs.auto_bump != 'none' }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      # Display files before potentially modifying them
      - name: Display initial files 
        run: |
          echo "Initial file structure:"
          find . -type f -name "*.tgz" | sort || echo "No tarballs found initially"
          ls -la dist/ || echo "No dist directory exists yet"

      - name: Build artifacts if not triggered by workflow_run
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        run: |
          npm install
          
          # Handle version management - apply to all selected plugins
          PUBLISH_CAPACITOR="${{ github.event.inputs.publish-capacitor }}"
          PUBLISH_CORDOVA="${{ github.event.inputs.publish-cordova }}"
          
          if [ "${{ github.event.inputs.auto_bump }}" != "none" ]; then
            # Auto-bump the version
            echo "Auto-bumping version (${{ github.event.inputs.auto_bump }})..."
            npm run version:${{ github.event.inputs.auto_bump }}
            
            # Extract the new version for tagging
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Bumped to version: $NEW_VERSION"
            
            # Create a git tag and push changes
            git add .
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
            git push origin HEAD:${{ github.ref }} --tags
            
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            # Use the manually specified version
            echo "Using specified version: ${{ github.event.inputs.version }}"
            node scripts/sync-versions.js --version=${{ github.event.inputs.version }}
            
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "Set version to: $NEW_VERSION"
          else
            # Use current version from package.json
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Using current version: $NEW_VERSION"
          fi
          
          echo "Final version for all selected plugins: $NEW_VERSION"
          
          # Debug inputs
          echo "publish-capacitor: ${{ github.event.inputs.publish-capacitor }}"
          echo "publish-cordova: ${{ github.event.inputs.publish-cordova }}"
          
          # Add even more debugging for the build step
          echo "----- DEBUG INFORMATION -----"
          echo "Workflow input values:"
          echo "publish-capacitor: '${{ github.event.inputs.publish-capacitor }}'"
          echo "publish-cordova: '${{ github.event.inputs.publish-cordova }}'"
          echo "dry-run: '${{ github.event.inputs.dry-run }}'"
          echo "--------------------------"
          
          # Build TypeScript for both plugins
          npm run build:ts
          
          # Conditionally build Capacitor plugin with better debugging
          echo "Checking if capacitor should be built ($PUBLISH_CAPACITOR == 'true')"
          if [ "$PUBLISH_CAPACITOR" = "true" ]; then
            echo "✓ Building Capacitor plugin..."
            mkdir -p dist/capacitor
            node scripts/prepare-capacitor.js
            if [ $? -ne 0 ]; then
              echo "❌ Error: prepare-capacitor.js script failed"
              exit 1
            fi
            
            echo "Verifying Capacitor plugin structure:"
            ls -la dist/capacitor/ || echo "Error: capacitor directory structure is not as expected"
            
            cd dist/capacitor
            echo "Creating Capacitor plugin tarball..."
            npm pack
            CAPACITOR_TARBALL=$(find . -name "*.tgz")
            echo "Created Capacitor tarball: $CAPACITOR_TARBALL"
            cd ../..
            echo "✓ Capacitor plugin built successfully"
            
            # Copy capacitor artifact to known location for artifact upload
            mkdir -p dist/npm-packages/
            cp dist/capacitor/*.tgz dist/npm-packages/ || echo "Warning: Could not copy Capacitor tarball"
          else
            echo "⏩ Skipping Capacitor plugin build (value: '$PUBLISH_CAPACITOR')"
          fi
          
          # Conditionally build Cordova plugin with better debugging
          echo "Checking if cordova should be built ($PUBLISH_CORDOVA == 'true')"
          if [ "$PUBLISH_CORDOVA" = "true" ]; then
            echo "✓ Building Cordova plugin..."
            node scripts/prepare-cordova.js
            if [ $? -ne 0 ]; then
              echo "❌ Error: prepare-cordova.js script failed"
              exit 1
            fi
            cd dist/cordova || { echo "❌ Error: cordova directory not found"; exit 1; }
            npm pack
            cd ../..
            echo "✓ Cordova plugin built successfully"
          else
            echo "⏩ Skipping Cordova plugin build (value: '$PUBLISH_CORDOVA')"
          fi

          # Copy cordova artifact to known location for artifact upload
          if [ "$PUBLISH_CORDOVA" = "true" ]; then
            mkdir -p dist/npm-packages/
            cp dist/cordova/*.tgz dist/npm-packages/ || echo "Warning: Could not copy Cordova tarball"
          fi
          
          # Ensure build artifacts are available for manual runs too
          echo "All build artifacts:"
          find dist -name "*.tgz" | sort || echo "No tarballs found after build"

      # For workflow_run triggered builds, download the artifacts
      - name: Download artifacts from build job
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: npm-packages
          path: dist/npm-packages
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      # Display downloaded files - now checking npm-packages directory specifically
      - name: Display downloaded files
        run: |
          echo "Files in dist directory:"
          ls -R dist || echo "No dist directory found"
          
          echo "Npm packages found:"
          find dist -name "*.tgz" | sort || echo "No tarballs found"

      # Upload artifacts for current build as well
      - name: Upload artifacts
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: npm-packages
          path: dist/npm-packages/*.tgz
          if-no-files-found: warn

      - name: Publish Capacitor Plugin to NPM
        if: github.event.inputs.publish-capacitor == 'true' && github.event.inputs.dry-run != 'true'
        run: |
          echo "Attempting to publish Capacitor plugin..."
          echo "Input values:"
          echo "publish-capacitor: '${{ github.event.inputs.publish-capacitor }}'"
          echo "dry-run: '${{ github.event.inputs.dry-run }}'"
          
          # Find capacitor tarball
          CAPACITOR_TARBALL=$(find dist -name "*capacitor*.tgz" | head -1)
          if [ -n "$CAPACITOR_TARBALL" ]; then
            echo "Found Capacitor tarball: $CAPACITOR_TARBALL"
          fi
          
          if [ -d "dist/capacitor" ]; then
            echo "dist/capacitor directory exists, publishing..."
            cd dist/capacitor && npm publish --access public
          else
            echo "❌ Error: dist/capacitor directory not found. Build may have failed."
            find dist -type d | sort
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish Cordova Plugin to NPM
        # Use string conversion for boolean inputs in GitHub Actions
        if: github.event.inputs.publish-cordova == 'true' && github.event.inputs.dry-run != 'true'
        run: |
          echo "Publishing Cordova plugin..."
          if [ -d "dist/cordova" ]; then
            cd dist/cordova && npm publish --access public
          else
            echo "Error: Cordova plugin not built. Cannot publish."
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      # Provide feedback at the end
      - name: Publication Status
        run: echo "Publication process completed"
      
      - name: Dry Run Status
        if: github.event.inputs.dry-run == 'true'
        run: echo "✅ Dry run completed - packages were not published"
      
      - name: Capacitor Publish Status
        if: ${{ github.event.inputs.publish-capacitor == 'true' && github.event.inputs.dry-run != 'true' }}
        run: echo "✅ Capacitor plugin published to npm registry"
      
      - name: Cordova Publish Status
        if: ${{ github.event.inputs.publish-cordova == 'true' && github.event.inputs.dry-run != 'true' }}
        run: echo "✅ Cordova plugin published to npm registry"
